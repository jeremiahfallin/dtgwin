import { useMemo } from "react";
import Head from "next/head";
import {
  Box,
  Table,
  Thead,
  Tbody,
  Tfoot,
  Tr,
  Th,
  Td,
  TableCaption,
  TableContainer,
  Text,
} from "@chakra-ui/react";
import { useFilters, useTable } from "react-table";
import results from "../results";
import Container from "../components/Container";

const colors = [
  "teal",
  "red",
  "blue",
  "green",
  "orange",
  "purple",
  "pink",
  "cyan",
];

function DefaultColumnFilter({
  column: { filterValue, preFilteredRows, setFilter },
}: any) {
  const count = preFilteredRows.length;

  return (
    <input
      value={filterValue || ""}
      onChange={(e) => {
        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely
      }}
      placeholder={`Search ${count} records...`}
    />
  );
}

export default function Home() {
  const data = useMemo(
    () =>
      results.map((result, i) => {
        return {
          col1: `${result?.time?.toLocaleString()} ${
            Intl.DateTimeFormat().resolvedOptions().timeZone
          }`,
          col2: result.blueTeam,
          col3: result.blueScore,
          col4: result.redTeam,
          col5: result.redScore,
          week: result.week,
        };
      }),
    []
  );
  const columns = useMemo(
    () => [
      {
        Header: "Time",
        accessor: "col1", // accessor is the "key" in the data
      },
      {
        Header: "Blue Team",
        accessor: "col2",
      },
      {
        Header: "Blue Score",
        accessor: "col3",
      },
      {
        Header: "Red Team",
        accessor: "col4",
      },
      {
        Header: "Red Score",
        accessor: "col5",
      },
    ],
    []
  );

  const defaultColumn = useMemo(
    () => ({
      Filter: DefaultColumnFilter,
    }),
    []
  );

  const filterTypes = useMemo(
    () => ({
      text: (rows: any, id: any, filterValue: any) => {
        return rows.filter((row: any) => {
          const rowValue = row.values[id];
          return rowValue !== undefined
            ? String(rowValue)
                .toLowerCase()
                .startsWith(String(filterValue).toLowerCase())
            : true;
        });
      },
    }),
    []
  );

  const tableInstance = useTable(
    { columns, data, defaultColumn, filterTypes },
    useFilters
  );

  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =
    tableInstance;

  return (
    <Container>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box as="main">
        <TableContainer>
          <Table size="sm" {...getTableProps()}>
            <Thead>
              {headerGroups.map((headerGroup: any) => (
                <Tr key={headerGroup.id} {...headerGroup.getHeaderGroupProps()}>
                  {headerGroup.headers.map((column: any) => (
                    <Th {...column.getHeaderProps()} key={column.id}>
                      {column.render("Header")}
                      <Box>
                        {column.canFilter ? column.render("Filter") : null}
                      </Box>
                    </Th>
                  ))}
                </Tr>
              ))}
            </Thead>
            <Tbody {...getTableBodyProps()}>
              {rows.map((row: any, i: number) => {
                prepareRow(row);
                return (
                  <Tr
                    backgroundColor={`${colors[row.original.week]}.600`}
                    {...row.getRowProps()}
                    key={row.id}
                  >
                    {row.cells.map((cell: any) => {
                      return (
                        <Td key={cell.id} {...cell.getCellProps()}>
                          {cell.render("Cell")}
                        </Td>
                      );
                    })}
                  </Tr>
                );
              })}
            </Tbody>
          </Table>
        </TableContainer>
      </Box>
    </Container>
  );
}
